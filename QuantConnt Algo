import numpy as np
from AlgorithmImports import *

class BB_RSI_SMAAlgorithm(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2022, 1, 1)
        self.SetEndDate(2023, 1, 1)
        self.SetCash(1000)
        
        self.symbol = self.AddCrypto("SOLUSD", Resolution.Daily).Symbol  # Change to SOLUSDT for cryptocurrency
        self.leverage = 15
        self.equity_pct = 0.05
        
        self.length = 30
        self.mult = 2.0
        self.fastSMALength = 20
        self.slowSMALength = 200
        self.rsiLength = 8
        self.stopLossPercent = 2
        self.takeProfitPercent = 5

        self.fastSMA = self.SMA(self.symbol, self.fastSMALength, Resolution.Daily)
        self.slowSMA = self.SMA(self.symbol, self.slowSMALength, Resolution.Daily)
        self.rsi = self.RSI(self.symbol, self.rsiLength, MovingAverageType.Wilders, Resolution.Daily)

        self.Schedule.On(self.DateRules.EveryDay(self.symbol), self.TimeRules.At(0, 0), self.EveryDayAtMidnight)
        
    def OnData(self, data):
        if not data.ContainsKey(self.symbol):
            return
        
        price = data[self.symbol].Close
        
        if self.fastSMA.IsReady and self.slowSMA.IsReady and self.rsi.IsReady:
            history = self.History(self.symbol, self.length, Resolution.Daily)
            closes = history['close'].tolist()
            basis = self.fastSMA.Current.Value
            dev = self.mult * np.std(closes)
            upper = basis + dev
            lower = basis - dev

            capital_per_trade = (self.Portfolio.Cash / price) * self.equity_pct * self.leverage

            if self.fastSMA.Current.Value > self.slowSMA.Current.Value and self.rsi.Current.Value < 35 and price < lower:
                self.SetHoldings(self.symbol, self.equity_pct)
                self.stopMarketTicket = self.StopMarketOrder(self.symbol, -self.Portfolio[self.symbol].Quantity, price * (1 - self.stopLossPercent * 0.01))
                self.limitTicket = self.LimitOrder(self.symbol, -self.Portfolio[self.symbol].Quantity, price * (1 + self.takeProfitPercent * 0.01))

            if self.fastSMA.Current.Value < self.slowSMA.Current.Value and self.rsi.Current.Value > 65 and price > upper:
                self.SetHoldings(self.symbol, -self.equity_pct)
                self.stopMarketTicket = self.StopMarketOrder(self.symbol, self.Portfolio[self.symbol].Quantity, price * (1 + self.stopLossPercent * 0.01))
                self.limitTicket = self.LimitOrder(self.symbol, self.Portfolio[self.symbol].Quantity, price * (1 - self.takeProfitPercent * 0.01))

    def EveryDayAtMidnight(self):
        if self.Portfolio.Invested:
            price = self.Securities[self.symbol].Price
            if self.fastSMA.IsReady and self.slowSMA.IsReady and self.rsi.IsReady:
                history = self.History(self.symbol, self.length, Resolution.Daily)
                closes = history['close'].tolist()
                basis = self.fastSMA.Current.Value
                dev = self.mult * np.std(closes)
                upper = basis + dev
                lower = basis - dev

                if self.Portfolio[self.symbol].IsLong and price > upper and self.rsi.Current.Value > 60:
                    self.Liquidate()
                if self.Portfolio[self.symbol].IsShort and price < lower and self.rsi.Current.Value < 35:
                    self.Liquidate()
